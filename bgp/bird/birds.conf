define OWNNETSET = [172.20.229.192/27+, 172.23.173.168/29+];
define OWNNETSETv6 = [fdf4:56da:a360::/48+];

router id OWNIP;

protocol device {
    scan time 10;
}

/*
 *  Utility functions
 */

function is_self_net() {
  return net ~ OWNNETSET;
}

function is_self_net_v6() {
  return net ~ OWNNETSETv6;
}

function is_valid_network() {
  return net ~ [
    172.20.0.0/14{21,29}, # dn42
    172.20.0.0/24{28,32}, # dn42 Anycast
    172.21.0.0/24{28,32}, # dn42 Anycast
    172.22.0.0/24{28,32}, # dn42 Anycast
    172.23.0.0/24{28,32}, # dn42 Anycast
    172.31.0.0/16+,       # ChaosVPN
    10.100.0.0/14+,       # ChaosVPN
    10.127.0.0/16{16,32}, # neonetwork
    10.0.0.0/8{15,24}     # Freifunk.net
  ];
}

roa4 table dn42_roa;
roa6 table dn42_roa_v6;

protocol static {
    roa4 { table dn42_roa; };
    include "/etc/bird/roa_dn42_v4.conf";
};

protocol static {
    roa6 { table dn42_roa_v6; };
    include "/etc/bird/roa_dn42_v6.conf";
};

function is_valid_network_v6() {
  return net ~ [
    fd00::/8{44,64} # ULA address space as per RFC 4193
  ];
}

protocol kernel {
    scan time 20;
    learn;

    ipv4 {
        import filter {
            igp_metric = krt_metric;
            if net ~ OWNNETSET then accept;
            reject;
        };
        export filter {
            if source = RTS_STATIC then reject;
            if net ~ OWNNETSET then reject;
            krt_prefsrc = OWNIP;
            accept;
        };
    };
}

protocol kernel {
    scan time 20;
    learn;

    ipv6 {
        import filter {
            igp_metric = krt_metric;
            if net ~ OWNNETSETv6 then accept;
            reject;
        };
        export filter {
            if source = RTS_STATIC then reject;
            if net ~ OWNNETSETv6 then reject;
            krt_prefsrc = OWNIPv6;
            accept;
        };
    };
};

protocol static {
    route OWNNET reject;

    ipv4 {
        import all;
        export none;
    };
}

protocol static {
    route OWNNETv6 reject;

    ipv6 {
        import all;
        export none;
    };
}
protocol direct {
    ipv4;
    ipv6;
    interface "dn42dummy0";
}
template bgp dnpeers {
    local as OWNAS;
    path metric 1;
    enable extended messages;

    ipv4 {
        import filter {
            if !is_valid_network() then reject;
            if (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then {
              print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
              reject;
            }
            if (64511, DN42_REGION) ~ bgp_community then bgp_local_pref = bgp_local_pref + 10;
            if (64511, DN42_COUNTRY) ~ bgp_community then bgp_local_pref = bgp_local_pref + 15;
            accept;
        };
        export filter {
            if !is_valid_network() then reject;
            if !(source ~ [RTS_STATIC, RTS_BGP]) then reject;
            if is_self_net() then {
                bgp_community.add((64511, DN42_REGION));
                bgp_community.add((64511, DN42_COUNTRY));
            }
            accept;
        };
        import limit 1000 action block;
    };

    ipv6 {
        import filter {
          if !is_valid_network_v6() then reject;
          if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then {
            print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
            reject;
          }
          if (64511, DN42_REGION) ~ bgp_community then bgp_local_pref = bgp_local_pref + 10;
          if (64511, DN42_COUNTRY) ~ bgp_community then bgp_local_pref = bgp_local_pref + 15;
          accept;
        };
        export filter {
            if !is_valid_network_v6() then reject;
            if !(source ~ [RTS_STATIC, RTS_BGP]) then reject;
            if net = fdf4:56da:a360:8000::/49 then {
                accept;
            }
            if is_self_net_v6() then {
                bgp_community.add((64511, DN42_REGION));
                bgp_community.add((64511, DN42_COUNTRY));
            }
            accept;
        };
        import limit 1000 action block;
    };
}

template bgp IBGP {
  local as OWNAS;
  path metric on;
  med metric on;
  multihop;
  enable extended messages on;
  ipv4 {
    gateway recursive;
    import all;
    next hop self;
    export filter {
        if net ~ OWNNETSET then reject;
        bgp_local_pref = 100;
        accept;
    };
  };
  ipv6 {
    gateway recursive;
    import all;
    next hop self;
    export filter {
        if net ~ OWNNETSETv6 then reject;
        bgp_local_pref = 100;
        accept;
    };
  };
};
protocol bgp ibgp_anycast {
    local as OWNAS;
    neighbor fdfb:e21a:fe54:c98d:4bef:9f1b:fd3b:d683 as OWNAS;
    ipv4 {
      import all;
      next hop self;
      export none;
    };
    ipv6 {
     import all;
     next hop self;
     export none;
   };
}