define OWNNETSET = [172.20.229.192/27, 172.23.173.168/29];
define OWNNETSETv6 = [fdf4:56da:a360::/48];

router id OWNIP;

protocol device {
    scan time 10;
}

/*
 *  Utility functions
 */

function is_self_net() {
  return net ~ OWNNETSET;
}

function is_self_net_v6() {
  return net ~ OWNNETSETv6;
}

function is_valid_network() {
  return net ~ [
    172.20.0.0/14{21,29}, # dn42
    172.20.0.0/24{28,32}, # dn42 Anycast
    172.21.0.0/24{28,32}, # dn42 Anycast
    172.22.0.0/24{28,32}, # dn42 Anycast
    172.23.0.0/24{28,32}, # dn42 Anycast
    172.31.0.0/16+,       # ChaosVPN
    10.100.0.0/14+,       # ChaosVPN
    10.127.0.0/16{16,32}, # neonetwork
    10.0.0.0/8{15,24}     # Freifunk.net
  ];
}

roa4 table dn42_roa;
roa6 table dn42_roa_v6;

protocol static {
    roa4 { table dn42_roa; };
    include "/etc/bird/roa_dn42.conf";
};

protocol static {
    roa6 { table dn42_roa_v6; };
    include "/etc/bird/roa_dn42_v6.conf";
};

function is_valid_network_v6() {
  return net ~ [
    fd00::/8{44,64} # ULA address space as per RFC 4193
  ];
}

protocol kernel {
    scan time 20;
    #learn;

    ipv6 {
        #import filter {
        #    if net ~ OWNNETSETv6 then accept;
        #    reject;
        #};
                import none;
        export filter {
            if source = RTS_STATIC then reject;
            if net ~ OWNNETSETv6 then reject;
            krt_prefsrc = OWNIPv6;
            accept;
        };
    };
};

protocol kernel {
    scan time 20;
    #learn;

    ipv4 {
        #import filter {
        #    if net ~ OWNNETSET then accept;
        #    reject;
        #};
                import none;
        export filter {
            if source = RTS_STATIC then reject;
            if net ~ OWNNETSET then reject;
            krt_prefsrc = OWNIP;
            accept;
        };
    };
}

protocol static {
    route OWNNET reject;
    route 172.20.229.192/27 reject;
    route 172.23.173.168/29 reject; # anycast

    ipv4 {
        import all;
        export none;
    };
}

protocol static {
    route OWNNETv6 reject;
    route fdf4:56da:a360:8000::/49 reject;

    ipv6 {
        import all;
        export none;
    };
}
protocol direct {
    ipv4;
    ipv6;
    interface "dn42dummy0";
}
protocol babel int_babel {
    ipv4 {
        import where source != RTS_BGP && is_self_net();
        export where source != RTS_BGP && is_self_net();
    };
    ipv6 {
        import where source != RTS_BGP && is_self_net_v6();
        export where source != RTS_BGP && is_self_net_v6();
    };

    interface "ztrta7dmfl";
};

template bgp dnpeers {
    local as OWNAS;
    path metric 1;
    enable extended messages;

    ipv4 {
        import filter {
            if is_valid_network() && !is_self_net() then {
            if (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then {
              print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
              reject;
            } else accept;
          } else reject;
        };

        export filter { if is_valid_network() && source ~ [RTS_STATIC, RTS_BGP] then accept; else reject; };
        import limit 1000 action block;
    };

    ipv6 {
        import filter {
          if is_valid_network_v6() && !is_self_net_v6() then {
            if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then {
              print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
              reject;
            } else accept;
          } else reject;
        };
        export filter { if is_valid_network_v6() && source ~ [RTS_STATIC, RTS_BGP] then accept; else reject; };
        import limit 1000 action block;
    };
}

template bgp ibgp {
  local as OWNAS;
  path metric on;
  med metric on;
  multihop;
  enable extended messages on;
  ipv4 {
    gateway recursive;
    import all;
    next hop self ebgp;
    export filter {
            if net ~ OWNNETSET then reject;
            accept;
        };
  };
  ipv6 {
    gateway recursive;
    import all;
    next hop self ebgp;
    export filter {
        if net ~ OWNNETSETv6 then reject;
        accept;
    };
  };
};